"""empty message

Revision ID: 04b11423b6b9
Revises: 4cd3cd64a0de
Create Date: 2020-05-28 18:47:33.392429

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session
from app.database.model_buff import ModelBuff
from app.database import enums
import os
import json

# revision identifiers, used by Alembic.
revision = "04b11423b6b9"
down_revision = "4cd3cd64a0de"
branch_labels = None
depends_on = None

to_stat_enum = {
    "Vitality": enums.Stat.VITALITY,
    "AP": enums.Stat.AP,
    "MP": enums.Stat.MP,
    "Initiative": enums.Stat.INITIATIVE,
    "Prospecting": enums.Stat.PROSPECTING,
    "Range": enums.Stat.RANGE,
    "Summons": enums.Stat.SUMMON,
    "Wisdom": enums.Stat.WISDOM,
    "Strength": enums.Stat.STRENGTH,
    "Intelligence": enums.Stat.INTELLIGENCE,
    "Chance": enums.Stat.CHANCE,
    "Agility": enums.Stat.AGILITY,
    "AP Parry": enums.Stat.AP_PARRY,
    "AP Reduction": enums.Stat.AP_REDUCTION,
    "MP Parry": enums.Stat.MP_PARRY,
    "MP Reduction": enums.Stat.MP_REDUCTION,
    "Critical": enums.Stat.CRITICAL,
    "Heals": enums.Stat.HEALS,
    "Lock": enums.Stat.LOCK,
    "Dodge": enums.Stat.DODGE,
    "Power": enums.Stat.POWER,
    "Damage": enums.Stat.DAMAGE,
    "Critical Damage": enums.Stat.CRITICAL_DAMAGE,
    "Neutral Damage": enums.Stat.NEUTRAL_DAMAGE,
    "Earth Damage": enums.Stat.EARTH_DAMAGE,
    "Fire Damage": enums.Stat.FIRE_DAMAGE,
    "Water Damage": enums.Stat.WATER_DAMAGE,
    "Air Damage": enums.Stat.AIR_DAMAGE,
    "Reflect": enums.Stat.REFLECT,
    "Trap Damage": enums.Stat.TRAP_DAMAGE,
    "Power (traps)": enums.Stat.TRAP_POWER,
    "Pushback Damage": enums.Stat.PUSHBACK_DAMAGE,
    "% Spell Damage": enums.Stat.PCT_SPELL_DAMAGE,
    "% Weapon Damage": enums.Stat.PCT_WEAPON_DAMAGE,
    "% Ranged Damage": enums.Stat.PCT_RANGED_DAMAGE,
    "% Melee Damage": enums.Stat.PCT_MELEE_DAMAGE,
    "Neutral Resistance": enums.Stat.NEUTRAL_RES,
    "% Neutral Resistance": enums.Stat.PCT_NEUTRAL_RES,
    "Earth Resistance": enums.Stat.EARTH_RES,
    "% Earth Resistance": enums.Stat.PCT_EARTH_RES,
    "Fire Resistance": enums.Stat.FIRE_RES,
    "% Fire Resistance": enums.Stat.PCT_FIRE_RES,
    "Water Resistance": enums.Stat.WATER_RES,
    "% Water Resistance": enums.Stat.PCT_WATER_RES,
    "Air Resistance": enums.Stat.AIR_RES,
    "% Air Resistance": enums.Stat.PCT_AIR_RES,
    "Critical Resistance": enums.Stat.CRITICAL_RES,
    "Pushback Resistance": enums.Stat.PUSHBACK_RES,
    "% Ranged Resistance": enums.Stat.PCT_RANGED_RES,
    "% Melee Resistance": enums.Stat.PCT_MELEE_RES,
    "Final Damage": enums.Stat.PCT_FINAL_DAMAGE,
    "pods": enums.Stat.PODS,
}


def upgrade():
    print("\n\n")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "buff",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("spell_stat_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "DAMAGE",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                "PODS",
                name="stat",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("min_value", sa.Integer(), nullable=True),
        sa.Column("increment_by", sa.Integer(), nullable=True),
        sa.Column("max_stacks", sa.Integer(), nullable=True),
        sa.Column("crit_min_value", sa.Integer(), nullable=True),
        sa.Column("crit_increment_by", sa.Integer(), nullable=True),
        sa.Column("crit_max_stacks", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["item_id"], ["item.uuid"], name=op.f("fk_buff_item_id_item")
        ),
        sa.ForeignKeyConstraint(
            ["spell_stat_id"],
            ["spell_stats.uuid"],
            name=op.f("fk_buff_spell_stat_id_spell_stats"),
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk_buff")),
        sa.UniqueConstraint("uuid", name=op.f("uq_buff_uuid")),
    )
    # ### end Alembic commands ###

    dirname = os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    )

    with open(os.path.join(dirname, "database/data/buffs.json"), "r") as file:
        data = json.load(file)
        session = Session(bind=op.get_bind())
        conn = op.get_bind()

        all_classes = data["spells"]
        all_items = data["items"]

        for d_class in all_classes:
            for spell in all_classes[d_class]:
                spell_name = spell["name"].replace("'", "''")
                res = conn.execute(
                    "select spell_id from spell_translation where spell_translation.name = '{}' and spell_translation.locale = 'en'".format(
                        spell_name
                    )
                )
                results = res.fetchall()

                for level in spell["levels"]:
                    res = conn.execute(
                        "select uuid from spell_stats where spell_stats.spell_id = '{}' and spell_stats.level = '{}'".format(
                            results[0][0], level["level"]
                        )
                    )
                    level_results = res.fetchall()

                    for buff in level["buffs"]:
                        buff_object = ModelBuff(
                            spell_stat_id=level_results[0][0],
                            stat=to_stat_enum[buff["stat"]],
                            min_value=buff["minValue"],
                            increment_by=buff["incrementBy"],
                            max_stacks=buff["maxStacks"],
                            crit_min_value=buff["critMinValue"],
                            crit_increment_by=buff["critIncrementBy"],
                            crit_max_stacks=buff["critMaxStacks"],
                        )
                        session.add(buff_object)

        session.commit()

        for item in all_items:
            res = conn.execute(
                "select item_id from item_translation where item_translation.name = '{}' and item_translation.locale = 'en'".format(
                    item["name"]
                )
            )
            results = res.fetchall()

            for buff in item["buffs"]:
                buff_object = ModelBuff(
                    item_id=results[0][0],
                    stat=to_stat_enum[buff["stat"]],
                    min_value=buff["minValue"],
                    increment_by=buff["incrementBy"],
                    max_stacks=buff["maxStacks"],
                )
                session.add(buff_object)

        session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("buff")
    # ### end Alembic commands ###
