"""empty message

Revision ID: 90eccf39ebb0
Revises: a8cc28082af7
Create Date: 2020-02-22 18:55:00.932315

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "90eccf39ebb0"
down_revision = "a8cc28082af7"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "set_bonus",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("set_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("num_items", sa.Integer(), nullable=False),
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                name="stat",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("max_value", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["set_id"], ["set.uuid"],),
        sa.PrimaryKeyConstraint("uuid"),
    )
    op.create_index(op.f("ix_set_bonus_set_id"), "set_bonus", ["set_id"], unique=False)
    op.create_table(
        "equipped_item",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("item_slot_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("custom_set_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["custom_set_id"], ["custom_set.uuid"],),
        sa.ForeignKeyConstraint(["item_id"], ["item.uuid"],),
        sa.ForeignKeyConstraint(["item_slot_id"], ["item_slot.uuid"],),
        sa.PrimaryKeyConstraint("uuid"),
        sa.UniqueConstraint("item_slot_id", "custom_set_id", name="equipped_item_slot"),
    )
    op.create_index(
        op.f("ix_equipped_item_custom_set_id"),
        "equipped_item",
        ["custom_set_id"],
        unique=False,
    )
    op.create_table(
        "equipped_item_exo",
        sa.Column(
            "uuid",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                name="stat",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("value", sa.Integer(), nullable=False),
        sa.Column("num_items", sa.Integer(), nullable=False),
        sa.Column("equipped_item_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["equipped_item_id"], ["equipped_item.uuid"],),
        sa.PrimaryKeyConstraint("uuid"),
    )
    op.create_index(
        op.f("ix_equipped_item_exo_equipped_item_id"),
        "equipped_item_exo",
        ["equipped_item_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_equipped_item_exo_num_items"),
        "equipped_item_exo",
        ["num_items"],
        unique=False,
    )
    op.drop_index("ix_custom_set_item_custom_set_id", table_name="custom_set_item")
    op.drop_table("custom_set_item")
    op.drop_table("custom_set_exo")
    op.create_index(
        op.f("ix_custom_set_owner_id"), "custom_set", ["owner_id"], unique=False
    )
    op.alter_column(
        "custom_set_stat",
        "custom_set_id",
        existing_type=postgresql.UUID(),
        nullable=False,
    )
    op.create_index(
        op.f("ix_custom_set_stat_custom_set_id"),
        "custom_set_stat",
        ["custom_set_id"],
        unique=False,
    )
    op.alter_column("item", "image_url", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "item", "item_type_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.create_index(
        op.f("ix_item_item_type_id"), "item", ["item_type_id"], unique=False
    )
    op.create_index(op.f("ix_item_set_id"), "item", ["set_id"], unique=False)
    op.add_column(
        "item_condition", sa.Column("custom_condition", sa.String(), nullable=True)
    )
    op.add_column(
        "item_condition", sa.Column("is_set_bonus", sa.Boolean(), nullable=False)
    )
    op.add_column(
        "item_condition",
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                name="stat",
                create_type=False,
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "item_condition", sa.Column("stat_greater_than", sa.Boolean(), nullable=True)
    )
    op.create_index(
        op.f("ix_item_condition_item_id"), "item_condition", ["item_id"], unique=False
    )
    op.drop_column("item_condition", "stat_type")
    op.drop_column("item_condition", "condition_type")
    op.alter_column(
        "item_stat", "item_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.create_index(
        op.f("ix_item_stat_item_id"), "item_stat", ["item_id"], unique=False
    )
    op.drop_column("set", "bonuses")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "set",
        sa.Column("bonuses", postgresql.BYTEA(), autoincrement=False, nullable=True),
    )
    op.drop_index(op.f("ix_item_stat_item_id"), table_name="item_stat")
    op.alter_column(
        "item_stat", "item_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.add_column(
        "item_condition",
        sa.Column("condition_type", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "item_condition",
        sa.Column("stat_type", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_index(op.f("ix_item_condition_item_id"), table_name="item_condition")
    op.drop_column("item_condition", "stat_greater_than")
    op.drop_column("item_condition", "stat")
    op.drop_column("item_condition", "is_set_bonus")
    op.drop_column("item_condition", "custom_condition")
    op.drop_index(op.f("ix_item_set_id"), table_name="item")
    op.drop_index(op.f("ix_item_item_type_id"), table_name="item")
    op.alter_column(
        "item", "item_type_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column("item", "image_url", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_index(
        op.f("ix_custom_set_stat_custom_set_id"), table_name="custom_set_stat"
    )
    op.alter_column(
        "custom_set_stat",
        "custom_set_id",
        existing_type=postgresql.UUID(),
        nullable=True,
    )
    op.drop_index(op.f("ix_custom_set_owner_id"), table_name="custom_set")
    op.create_table(
        "custom_set_exo",
        sa.Column(
            "uuid",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "stat",
            postgresql.ENUM(
                "VITALITY",
                "AP",
                "MP",
                "INITIATIVE",
                "PROSPECTING",
                "RANGE",
                "SUMMON",
                "WISDOM",
                "STRENGTH",
                "INTELLIGENCE",
                "CHANCE",
                "AGILITY",
                "AP_PARRY",
                "AP_REDUCTION",
                "MP_PARRY",
                "MP_REDUCTION",
                "CRITICAL",
                "HEALS",
                "LOCK",
                "DODGE",
                "PCT_FINAL_DAMAGE",
                "POWER",
                "CRITICAL_DAMAGE",
                "NEUTRAL_DAMAGE",
                "EARTH_DAMAGE",
                "FIRE_DAMAGE",
                "WATER_DAMAGE",
                "AIR_DAMAGE",
                "REFLECT",
                "TRAP_DAMAGE",
                "TRAP_POWER",
                "PUSHBACK_DAMAGE",
                "PCT_SPELL_DAMAGE",
                "PCT_WEAPON_DAMAGE",
                "PCT_RANGED_DAMAGE",
                "PCT_MELEE_DAMAGE",
                "NEUTRAL_RES",
                "PCT_NEUTRAL_RES",
                "EARTH_RES",
                "PCT_EARTH_RES",
                "FIRE_RES",
                "PCT_FIRE_RES",
                "WATER_RES",
                "PCT_WATER_RES",
                "AIR_RES",
                "PCT_AIR_RES",
                "CRITICAL_RES",
                "PUSHBACK_RES",
                "PCT_RANGED_RES",
                "PCT_MELEE_RES",
                name="stat",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("value", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "custom_set_id", postgresql.UUID(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["custom_set_id"],
            ["custom_set.uuid"],
            name="custom_set_exo_custom_set_id_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="custom_set_exo_pkey"),
    )
    op.create_table(
        "custom_set_item",
        sa.Column(
            "item_slot_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "custom_set_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("item_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["custom_set_id"],
            ["custom_set.uuid"],
            name="custom_set_fk_item_custom_set_id_custom_set",
        ),
        sa.ForeignKeyConstraint(
            ["item_id"], ["item.uuid"], name="custom_set_item_item_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["item_slot_id"],
            ["item_slot.uuid"],
            name="custom_set_item_item_slot_id_fkey",
        ),
        sa.UniqueConstraint(
            "item_slot_id", "custom_set_id", name="custom_set_item_slot"
        ),
    )
    op.create_index(
        "ix_custom_set_item_custom_set_id",
        "custom_set_item",
        ["custom_set_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_equipped_item_exo_num_items"), table_name="equipped_item_exo"
    )
    op.drop_index(
        op.f("ix_equipped_item_exo_equipped_item_id"), table_name="equipped_item_exo"
    )
    op.drop_table("equipped_item_exo")
    op.drop_index(op.f("ix_equipped_item_custom_set_id"), table_name="equipped_item")
    op.drop_table("equipped_item")
    op.drop_index(op.f("ix_set_bonus_set_id"), table_name="set_bonus")
    op.drop_table("set_bonus")
    # ### end Alembic commands ###
